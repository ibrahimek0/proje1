{"title":"Ödev 1: Uzay Gemisi Titanik","markdown":{"yaml":{"title":"Ödev 1: Uzay Gemisi Titanik"},"headingText":"Uzay Gemisi Titanic Projesi","containsRefs":false,"markdown":"\n\n\nVeri bilimini korumanın kozmik bir gizemi çözmek için gerekli olduğu 2912 yılında hoş geldiniz. Dört ışık yılı öteden bir iletilen ve işler iyi görünmüyor.\n\nUzay Gemisi Titanic, bir ay önce fırlatılan bir yıldızlararası yolcu yolculuğuydu. Gemide yaklaşık 13.000 yolcuyla, geminin ilk yolculuğuna çıktı ve göçmenleri güneş sistemimizden yakın yıldızların dönüşünde dönen üç yeni yaşanabilir dış gezegene taşındı.\n\nİlk varış noktası olan yakıcı 55 Cancri E'ye doğru yolda Alpha Centauri'yi dönerken, dikkatsiz Uzay Gemisi Titanik, bir toz bulutunun içinde saklı bir uzay-zaman anomalisiyle çarpıştı. Ne yazık ki, 1000 yıl önceki ismin babasıyla aynı kaderi paylaştı. Gemi sağlam kalsa da, yolcuların neredeyse ortasında alternatif bir boyuta taşındı.\n\ntrain.csv Eğitim verisi olarak kullanılacak yolcuların yaklaşık üç ikisine (~8700) ait kişisel kayıtlar.\nPassengerId Her yolcu için benzersiz bir kimlik. Kimliği, yolcunun seyahat ettiği ve gruptaki numarasını gggg_pp gösteren bir form grubu alır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil.\nHomePlanet Yolcunun ekonomik gezegeni, genellikle daimi ikamet ettiği gezegen.\nCryoSleep Yolcunun duraklama süresinin sona erme hareketini almayı seçmeyi seçmediğini belirtir. Kriyo uykudaki yolcu kabinlerine kapatılır.\nKabin yolcusunun kabin numarası. Şeklindedirdeck/num/side, Liman veya Sancak için sideolabilir.PS Destinasyon-Yolcunun ineceği gezegen.\nYaş Yolcunun yaşı.\nVIP Yolcunun seyahati sırasında özel VIP hizmeti için ödemelerin yapılmadığı.\nRoomService , FoodCourt , Alışveriş Merkezi , Spa , VRDeck Uzay Gemisi Titanic'in birçok lüks konaklama için yolcunun ödediği tutar.\nİsim Yolcunun adı ve soyadı.\nTaşınan yolcunun başka bir boyuta taşınıp taşınmadığı. Bu hedefi tahmin etmeye çalışmak sütununda yer alır.\n\n\n```{r}\nlibrary(readr)\ntrain <- read_csv(\"data/train.csv\")\ntest <- read_csv(\"data/test.csv\")\n```\n\n  \n```{r}\nlibrary(explore)\n```\n  \n```{r}\nlibrary(psych)\npsych::describe(train)\n\n```\n\n```{r}\ndescribe_all(test)\n```\n\n# Veri Önizleme\n\nPESSENGER ID\nHer yolcu için benzersiz bir kimlik. Her kimlik, gggg_pp biçimini alır; burada gggg, yolcunun seyahat ettiği grubu belirtir ve pp, gruptaki numaradır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil.\n\nOnun yolcusu için benzersiz bir kimlik. Onun kimlik gggg_pp'sini alır; burada gggg, yolcunun birlikte seyahat ettiği grubu belirtir ve pp, grubun içindeki numaradır. Bir gruptaki insanların çoğu aile üyeleridir, ancak her zaman değil.\n\n\n```{r}\n\nhead(train$PassengerId)\n```\n\n\n```{r}\nlibrary(stringr)\n```\n\n```{r}\ntrain[c(\"ailenum\", \"ailesira\")] <- str_split_fixed(train$PassengerId, \"_\", 2)\n```\n\n```{r}\ntest[c(\"ailenum\", \"ailesira\")] <- str_split_fixed(test$PassengerId, \"_\", 2)\n```\n\n\n```{r}\nhead(train[, c(\"PassengerId\",\"ailenum\", \"ailesira\")])\n```\n\n```{r}\nlibrary(tidyverse)\n```\n\n```{r}\ntrain <- train %>%\n  group_by(ailenum) %>%\n  mutate(tek_basina = ifelse(n() == 1, 1, 0)) %>%\n  ungroup()\n```\n\n```{r}\ntest <- test %>%\n  group_by(ailenum) %>%\n  mutate(tek_basina = ifelse(n() == 1, 1, 0)) %>%\n  ungroup()\n```\n\n```{r}\ntrain <- train %>% select(-ailenum,-ailesira)\ntest <- test %>% select(-ailenum,-ailesira)\n```\n\n```{r}\ntrain$tek_basina <- as.factor(train$tek_basina)\ntest$tek_basina <- as.factor(test$tek_basina)\n```\n\n```{r}\nsummary(train$tek_basina)\n```\n\n# CABİN\n\nYolcunun kaldığı kabin numarası. deck/num/side formunu alır, burada side, P (Sunboard) veya S (Pan) olabilir.\n\nYolcunun kaldığı kabin numarası. Güverte/numara/yan birleştirilir; burada taraf, İskele için P veya Sancak için S olabilir.\n\n```{r}\nhead(train$Cabin)\n```\n\n```{r}\ntrain[c('deck', 'num', 'side')] <- str_split_fixed(train$Cabin, '/', 3)\n```\n\n```{r}\ntest[c('deck', 'num', 'side')] <- str_split_fixed(test$Cabin, '/', 3)\n```\n\n```{r}\nhead(train[, c(\"Cabin\",\"deck\", \"num\", \"side\")])\n```\n\n```{r}\ntrain[train == \"\"] <- NA\ntest[test == \"\"] <- NA\n```\n\n```{r}\ntrain <- train %>% select(-Cabin)\ntest <- test %>% select(-Cabin)\n```\n\n```{r}\nsummary(as.factor(train$deck))\n```\n\n```{r}\ntrain$deck[train$deck %in% c(\"T\", \"NA\")] <- \"Other\"\ntest$deck[test$deck %in% c(\"T\", \"NA\")] <- \"Other\"\ntrain$deck[is.na(train$deck)] <- \"Other\"\ntest$deck[is.na(test$deck)] <- \"Other\"\n```\n\n```{r}\nsummary(as.factor(train$deck))\n```\n\n```{r}\ndescribe_all(train)\n```\n\n```{r}\ntrain <- train %>% select(-Name, -num)\ntest <- test %>% select(-Name, -num)\n```\n\n```{r}\ntrain <- train %>%\n  mutate_if(is.logical, as.factor) %>%   # Convert logical columns to factors\n  mutate(across(where(is.character) & !all_of(\"PassengerId\"), as.factor))      # Convert character columns to factors\n\ntest <- test %>%\n  mutate_if(is.logical, as.factor) %>%   # Convert logical columns to factors\n  mutate(across(where(is.character) & !all_of(\"PassengerId\"), as.factor))      # Convert character columns to factors\n```\n\n```{r}\nsummary(train)\n```\n\n```{r}\nsummary(test)\n```\n\n# AGE\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\n# Create a ggplot object for train dataset\np_train <- ggplot(train, aes(x = Age)) +\n  geom_histogram(fill = \"blue\", alpha = 0.5, bins = 20) +\n  labs(title = \"Train Dataset\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n\n# Create a ggplot object for test dataset\np_test <- ggplot(test, aes(x = Age)) +\n  geom_histogram(fill = \"red\", alpha = 0.5, bins = 20) +\n  labs(title = \"Test Dataset\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n```\n\n```{r}\nlibrary(gridExtra)\n```\n\n```{r}\ngrid.arrange(p_train, p_test, ncol = 2)\n```\n\n```{r}\n# Create the histogram for both datasets in one plot without combining\nggplot() +\n  geom_histogram(data = train, aes(x = Age, fill = \"Train\"), \n                 position = \"identity\", alpha = 0.5, bins = 20) +\n  geom_histogram(data = test, aes(x = Age, fill = \"Test\"), \n                 position = \"identity\", alpha = 0.5, bins = 20) +\n  labs(title = \"Histogram of Age Variable\",\n       x = \"Age\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(name = \"Dataset\", values = c(\"Train\" = \"blue\", \"Test\" = \"red\"))\n``` \n\n# Home Planet\n\n```{r}\nsummary(train$HomePlanet)\n```\n\n```{r}\nsummary(test$HomePlanet)\n```\n\n```{r}\n# Create a ggplot object for train dataset\np_hptrain <- ggplot(train, aes(x = HomePlanet)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Train Dataset\", x = \"Home Planet\", y = \"Count\") +\n  theme_minimal()\n\n# Create a ggplot object for test dataset\np_hptest <- ggplot(test, aes(x = HomePlanet)) +\n  geom_bar(fill = \"red\", alpha = 0.5) +\n  labs(title = \"Test Dataset\", x = \"Home Planet\", y = \"Count\") +\n  theme_minimal()\n```\n\n```{r}\ngrid.arrange(p_hptrain, p_hptest, ncol = 2)\n```\n\n```{r}\n# Create the histogram for both datasets in one plot without combining\nggplot() +\n  geom_bar(data = train, aes(x = HomePlanet, fill = \"Train\"), \n                 position = \"identity\", alpha = 0.5) +\n  geom_bar(data = test, aes(x = HomePlanet, fill = \"Test\"), \n                 position = \"identity\", alpha = 0.5) +\n  labs(title = \"Histogram of Age Variable\",\n       x = \"Home Planet\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(name = \"Dataset\", values = c(\"Train\" = \"blue\", \"Test\" = \"red\"))\n```\n\n# TRANSPORTED\n\n```{r}\nggplot(train, aes(x = Transported)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Train Dataset\", x = \"Transported\", y = \"Count\") +\n  theme_minimal()\n```\n\n```{r}\nlibrary(tidymodels)\n```\n\n```{r}\nst_recipe <- recipe(Transported ~ ., data = train) %>% \n  update_role(PassengerId, new_role = \"ID\") %>%\n  step_impute_knn(all_predictors()) %>%\n  step_normalize(all_numeric_predictors()) %>% \n  step_dummy(all_nominal_predictors(), one_hot = TRUE)\n```\n\n```{r}\n# Specify the logistic regression model\nlogistic_model <- logistic_reg() %>%\n  set_engine(\"glm\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(logistic_model)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n\n```{r}\nwrite.csv(submission, \"submission_logistic.csv\", row.names = FALSE, quote = FALSE)\n```\n\n```{r}\nrf_model <- rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% \n  set_engine(\"ranger\") %>% \n  set_mode(\"classification\")\n\nset.seed(123)\nrf_wf <-\n  workflow() %>%\n  add_model(rf_model) %>% \n  add_recipe(st_recipe)\nrf_wf\n```\n\n\n```{r}\nset.seed(123)\nspaceship_val <- validation_split(train, \n                               strata = Transported, \n                               prop = 0.80)\n```\n\n```{r}\nrf_results <-\n  rf_wf %>% \n  tune_grid(resamples = spaceship_val,\n            grid = 25,\n            control = control_grid(save_pred = TRUE),\n            metrics = metric_set(accuracy)\n  )\n```\n\n```{r}\nrf_results %>% \n  collect_predictions()\n```\n\n```{r}\nrf_results %>%\n  collect_metrics()\n```\n\n```{r}\nparam_final <- rf_results %>%\n  select_best(metric = \"accuracy\")\nparam_final\n```\n\n```{r}\nlast_rf_model <- rand_forest(mtry = param_final$mtry, min_n = param_final$min_n, trees = 1000) %>% \n  set_engine(\"ranger\") %>% \n  set_mode(\"classification\")\n\nlast_rf_wf <- rf_wf %>%\n  update_model(last_rf_model)\n\nlast_rf_fit <- \n  last_rf_wf %>% \n  fit(train)\n```\n\n```{r}\ntest_pred <- predict(last_rf_fit, test)\n\noptions(warn = getOption(\"warn\"))\ntest_pred_new <- test_pred %>% \n  mutate(.pred_class = str_to_title(.pred_class))\n```\n\n```{r}\nsubmission$Transported <- test_pred_new$.pred_class\n```\n\n```{r}\nwrite_csv(submission, \"submissionrf.csv\")\n```\n\n```{r}\nbt_cls_spec <- \n    boost_tree(trees = 15) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"xgboost\")\n```\n\n```{r}\nbt_cls_spec <- \n    boost_tree(trees = 15) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"xgboost\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(bt_cls_spec)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n```{r}\nwrite.csv(submission, \"submission_xg.csv\", row.names = FALSE, quote = FALSE)\n```\n\n```{r}\nsvm_cls_spec <- \n    svm_poly(cost = 1) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"kernlab\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(svm_cls_spec)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n```{r}\nwrite.csv(submission, \"submission_polysvm.csv\", row.names = FALSE, quote = FALSE)\n```\n\n```{r}\nsvm_cls_spec <- \n  svm_rbf(cost = 1) %>% \n  # This model can be used for classification or regression, so set mode\n  set_mode(\"classification\") %>% \n  set_engine(\"kernlab\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(svm_cls_spec)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n```{r}\nwrite.csv(submission, \"submission_rbfsvm.csv\", row.names = FALSE, quote = FALSE)\n```\n\n","srcMarkdownNoYaml":"\n\n# Uzay Gemisi Titanic Projesi\n\nVeri bilimini korumanın kozmik bir gizemi çözmek için gerekli olduğu 2912 yılında hoş geldiniz. Dört ışık yılı öteden bir iletilen ve işler iyi görünmüyor.\n\nUzay Gemisi Titanic, bir ay önce fırlatılan bir yıldızlararası yolcu yolculuğuydu. Gemide yaklaşık 13.000 yolcuyla, geminin ilk yolculuğuna çıktı ve göçmenleri güneş sistemimizden yakın yıldızların dönüşünde dönen üç yeni yaşanabilir dış gezegene taşındı.\n\nİlk varış noktası olan yakıcı 55 Cancri E'ye doğru yolda Alpha Centauri'yi dönerken, dikkatsiz Uzay Gemisi Titanik, bir toz bulutunun içinde saklı bir uzay-zaman anomalisiyle çarpıştı. Ne yazık ki, 1000 yıl önceki ismin babasıyla aynı kaderi paylaştı. Gemi sağlam kalsa da, yolcuların neredeyse ortasında alternatif bir boyuta taşındı.\n\ntrain.csv Eğitim verisi olarak kullanılacak yolcuların yaklaşık üç ikisine (~8700) ait kişisel kayıtlar.\nPassengerId Her yolcu için benzersiz bir kimlik. Kimliği, yolcunun seyahat ettiği ve gruptaki numarasını gggg_pp gösteren bir form grubu alır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil.\nHomePlanet Yolcunun ekonomik gezegeni, genellikle daimi ikamet ettiği gezegen.\nCryoSleep Yolcunun duraklama süresinin sona erme hareketini almayı seçmeyi seçmediğini belirtir. Kriyo uykudaki yolcu kabinlerine kapatılır.\nKabin yolcusunun kabin numarası. Şeklindedirdeck/num/side, Liman veya Sancak için sideolabilir.PS Destinasyon-Yolcunun ineceği gezegen.\nYaş Yolcunun yaşı.\nVIP Yolcunun seyahati sırasında özel VIP hizmeti için ödemelerin yapılmadığı.\nRoomService , FoodCourt , Alışveriş Merkezi , Spa , VRDeck Uzay Gemisi Titanic'in birçok lüks konaklama için yolcunun ödediği tutar.\nİsim Yolcunun adı ve soyadı.\nTaşınan yolcunun başka bir boyuta taşınıp taşınmadığı. Bu hedefi tahmin etmeye çalışmak sütununda yer alır.\n\n\n```{r}\nlibrary(readr)\ntrain <- read_csv(\"data/train.csv\")\ntest <- read_csv(\"data/test.csv\")\n```\n\n  \n```{r}\nlibrary(explore)\n```\n  \n```{r}\nlibrary(psych)\npsych::describe(train)\n\n```\n\n```{r}\ndescribe_all(test)\n```\n\n# Veri Önizleme\n\nPESSENGER ID\nHer yolcu için benzersiz bir kimlik. Her kimlik, gggg_pp biçimini alır; burada gggg, yolcunun seyahat ettiği grubu belirtir ve pp, gruptaki numaradır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil.\n\nOnun yolcusu için benzersiz bir kimlik. Onun kimlik gggg_pp'sini alır; burada gggg, yolcunun birlikte seyahat ettiği grubu belirtir ve pp, grubun içindeki numaradır. Bir gruptaki insanların çoğu aile üyeleridir, ancak her zaman değil.\n\n\n```{r}\n\nhead(train$PassengerId)\n```\n\n\n```{r}\nlibrary(stringr)\n```\n\n```{r}\ntrain[c(\"ailenum\", \"ailesira\")] <- str_split_fixed(train$PassengerId, \"_\", 2)\n```\n\n```{r}\ntest[c(\"ailenum\", \"ailesira\")] <- str_split_fixed(test$PassengerId, \"_\", 2)\n```\n\n\n```{r}\nhead(train[, c(\"PassengerId\",\"ailenum\", \"ailesira\")])\n```\n\n```{r}\nlibrary(tidyverse)\n```\n\n```{r}\ntrain <- train %>%\n  group_by(ailenum) %>%\n  mutate(tek_basina = ifelse(n() == 1, 1, 0)) %>%\n  ungroup()\n```\n\n```{r}\ntest <- test %>%\n  group_by(ailenum) %>%\n  mutate(tek_basina = ifelse(n() == 1, 1, 0)) %>%\n  ungroup()\n```\n\n```{r}\ntrain <- train %>% select(-ailenum,-ailesira)\ntest <- test %>% select(-ailenum,-ailesira)\n```\n\n```{r}\ntrain$tek_basina <- as.factor(train$tek_basina)\ntest$tek_basina <- as.factor(test$tek_basina)\n```\n\n```{r}\nsummary(train$tek_basina)\n```\n\n# CABİN\n\nYolcunun kaldığı kabin numarası. deck/num/side formunu alır, burada side, P (Sunboard) veya S (Pan) olabilir.\n\nYolcunun kaldığı kabin numarası. Güverte/numara/yan birleştirilir; burada taraf, İskele için P veya Sancak için S olabilir.\n\n```{r}\nhead(train$Cabin)\n```\n\n```{r}\ntrain[c('deck', 'num', 'side')] <- str_split_fixed(train$Cabin, '/', 3)\n```\n\n```{r}\ntest[c('deck', 'num', 'side')] <- str_split_fixed(test$Cabin, '/', 3)\n```\n\n```{r}\nhead(train[, c(\"Cabin\",\"deck\", \"num\", \"side\")])\n```\n\n```{r}\ntrain[train == \"\"] <- NA\ntest[test == \"\"] <- NA\n```\n\n```{r}\ntrain <- train %>% select(-Cabin)\ntest <- test %>% select(-Cabin)\n```\n\n```{r}\nsummary(as.factor(train$deck))\n```\n\n```{r}\ntrain$deck[train$deck %in% c(\"T\", \"NA\")] <- \"Other\"\ntest$deck[test$deck %in% c(\"T\", \"NA\")] <- \"Other\"\ntrain$deck[is.na(train$deck)] <- \"Other\"\ntest$deck[is.na(test$deck)] <- \"Other\"\n```\n\n```{r}\nsummary(as.factor(train$deck))\n```\n\n```{r}\ndescribe_all(train)\n```\n\n```{r}\ntrain <- train %>% select(-Name, -num)\ntest <- test %>% select(-Name, -num)\n```\n\n```{r}\ntrain <- train %>%\n  mutate_if(is.logical, as.factor) %>%   # Convert logical columns to factors\n  mutate(across(where(is.character) & !all_of(\"PassengerId\"), as.factor))      # Convert character columns to factors\n\ntest <- test %>%\n  mutate_if(is.logical, as.factor) %>%   # Convert logical columns to factors\n  mutate(across(where(is.character) & !all_of(\"PassengerId\"), as.factor))      # Convert character columns to factors\n```\n\n```{r}\nsummary(train)\n```\n\n```{r}\nsummary(test)\n```\n\n# AGE\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\n# Create a ggplot object for train dataset\np_train <- ggplot(train, aes(x = Age)) +\n  geom_histogram(fill = \"blue\", alpha = 0.5, bins = 20) +\n  labs(title = \"Train Dataset\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n\n# Create a ggplot object for test dataset\np_test <- ggplot(test, aes(x = Age)) +\n  geom_histogram(fill = \"red\", alpha = 0.5, bins = 20) +\n  labs(title = \"Test Dataset\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n```\n\n```{r}\nlibrary(gridExtra)\n```\n\n```{r}\ngrid.arrange(p_train, p_test, ncol = 2)\n```\n\n```{r}\n# Create the histogram for both datasets in one plot without combining\nggplot() +\n  geom_histogram(data = train, aes(x = Age, fill = \"Train\"), \n                 position = \"identity\", alpha = 0.5, bins = 20) +\n  geom_histogram(data = test, aes(x = Age, fill = \"Test\"), \n                 position = \"identity\", alpha = 0.5, bins = 20) +\n  labs(title = \"Histogram of Age Variable\",\n       x = \"Age\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(name = \"Dataset\", values = c(\"Train\" = \"blue\", \"Test\" = \"red\"))\n``` \n\n# Home Planet\n\n```{r}\nsummary(train$HomePlanet)\n```\n\n```{r}\nsummary(test$HomePlanet)\n```\n\n```{r}\n# Create a ggplot object for train dataset\np_hptrain <- ggplot(train, aes(x = HomePlanet)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Train Dataset\", x = \"Home Planet\", y = \"Count\") +\n  theme_minimal()\n\n# Create a ggplot object for test dataset\np_hptest <- ggplot(test, aes(x = HomePlanet)) +\n  geom_bar(fill = \"red\", alpha = 0.5) +\n  labs(title = \"Test Dataset\", x = \"Home Planet\", y = \"Count\") +\n  theme_minimal()\n```\n\n```{r}\ngrid.arrange(p_hptrain, p_hptest, ncol = 2)\n```\n\n```{r}\n# Create the histogram for both datasets in one plot without combining\nggplot() +\n  geom_bar(data = train, aes(x = HomePlanet, fill = \"Train\"), \n                 position = \"identity\", alpha = 0.5) +\n  geom_bar(data = test, aes(x = HomePlanet, fill = \"Test\"), \n                 position = \"identity\", alpha = 0.5) +\n  labs(title = \"Histogram of Age Variable\",\n       x = \"Home Planet\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(name = \"Dataset\", values = c(\"Train\" = \"blue\", \"Test\" = \"red\"))\n```\n\n# TRANSPORTED\n\n```{r}\nggplot(train, aes(x = Transported)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Train Dataset\", x = \"Transported\", y = \"Count\") +\n  theme_minimal()\n```\n\n```{r}\nlibrary(tidymodels)\n```\n\n```{r}\nst_recipe <- recipe(Transported ~ ., data = train) %>% \n  update_role(PassengerId, new_role = \"ID\") %>%\n  step_impute_knn(all_predictors()) %>%\n  step_normalize(all_numeric_predictors()) %>% \n  step_dummy(all_nominal_predictors(), one_hot = TRUE)\n```\n\n```{r}\n# Specify the logistic regression model\nlogistic_model <- logistic_reg() %>%\n  set_engine(\"glm\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(logistic_model)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n\n```{r}\nwrite.csv(submission, \"submission_logistic.csv\", row.names = FALSE, quote = FALSE)\n```\n\n```{r}\nrf_model <- rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% \n  set_engine(\"ranger\") %>% \n  set_mode(\"classification\")\n\nset.seed(123)\nrf_wf <-\n  workflow() %>%\n  add_model(rf_model) %>% \n  add_recipe(st_recipe)\nrf_wf\n```\n\n\n```{r}\nset.seed(123)\nspaceship_val <- validation_split(train, \n                               strata = Transported, \n                               prop = 0.80)\n```\n\n```{r}\nrf_results <-\n  rf_wf %>% \n  tune_grid(resamples = spaceship_val,\n            grid = 25,\n            control = control_grid(save_pred = TRUE),\n            metrics = metric_set(accuracy)\n  )\n```\n\n```{r}\nrf_results %>% \n  collect_predictions()\n```\n\n```{r}\nrf_results %>%\n  collect_metrics()\n```\n\n```{r}\nparam_final <- rf_results %>%\n  select_best(metric = \"accuracy\")\nparam_final\n```\n\n```{r}\nlast_rf_model <- rand_forest(mtry = param_final$mtry, min_n = param_final$min_n, trees = 1000) %>% \n  set_engine(\"ranger\") %>% \n  set_mode(\"classification\")\n\nlast_rf_wf <- rf_wf %>%\n  update_model(last_rf_model)\n\nlast_rf_fit <- \n  last_rf_wf %>% \n  fit(train)\n```\n\n```{r}\ntest_pred <- predict(last_rf_fit, test)\n\noptions(warn = getOption(\"warn\"))\ntest_pred_new <- test_pred %>% \n  mutate(.pred_class = str_to_title(.pred_class))\n```\n\n```{r}\nsubmission$Transported <- test_pred_new$.pred_class\n```\n\n```{r}\nwrite_csv(submission, \"submissionrf.csv\")\n```\n\n```{r}\nbt_cls_spec <- \n    boost_tree(trees = 15) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"xgboost\")\n```\n\n```{r}\nbt_cls_spec <- \n    boost_tree(trees = 15) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"xgboost\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(bt_cls_spec)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n```{r}\nwrite.csv(submission, \"submission_xg.csv\", row.names = FALSE, quote = FALSE)\n```\n\n```{r}\nsvm_cls_spec <- \n    svm_poly(cost = 1) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"kernlab\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(svm_cls_spec)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n```{r}\nwrite.csv(submission, \"submission_polysvm.csv\", row.names = FALSE, quote = FALSE)\n```\n\n```{r}\nsvm_cls_spec <- \n  svm_rbf(cost = 1) %>% \n  # This model can be used for classification or regression, so set mode\n  set_mode(\"classification\") %>% \n  set_engine(\"kernlab\")\n```\n\n```{r}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(svm_cls_spec)\n```\n\n```{r}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n```{r}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n\n```{r}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n\n```{r}\nsubmission <- as.data.frame(submission)\n```\n\n```{r}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n\n```{r}\nwrite.csv(submission, \"submission_rbfsvm.csv\", row.names = FALSE, quote = FALSE)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"odev1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.32","title":"Ödev 1: Uzay Gemisi Titanik"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}