{
  "hash": "1b1658b080361e97bec5cbee3bedab9e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ödev 1: Uzay Gemisi Titanik\"\n---\n\n\n\n\n# Uzay Gemisi Titanic Projesi\n\nVeri bilimini korumanın kozmik bir gizemi çözmek için gerekli olduğu 2912 yılında hoş geldiniz. Dört ışık yılı öteden bir iletilen ve işler iyi görünmüyor.\n\nUzay Gemisi Titanic, bir ay önce fırlatılan bir yıldızlararası yolcu yolculuğuydu. Gemide yaklaşık 13.000 yolcuyla, geminin ilk yolculuğuna çıktı ve göçmenleri güneş sistemimizden yakın yıldızların dönüşünde dönen üç yeni yaşanabilir dış gezegene taşındı.\n\nİlk varış noktası olan yakıcı 55 Cancri E'ye doğru yolda Alpha Centauri'yi dönerken, dikkatsiz Uzay Gemisi Titanik, bir toz bulutunun içinde saklı bir uzay-zaman anomalisiyle çarpıştı. Ne yazık ki, 1000 yıl önceki ismin babasıyla aynı kaderi paylaştı. Gemi sağlam kalsa da, yolcuların neredeyse ortasında alternatif bir boyuta taşındı.\n\ntrain.csv Eğitim verisi olarak kullanılacak yolcuların yaklaşık üç ikisine (~8700) ait kişisel kayıtlar.\nPassengerId Her yolcu için benzersiz bir kimlik. Kimliği, yolcunun seyahat ettiği ve gruptaki numarasını gggg_pp gösteren bir form grubu alır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil.\nHomePlanet Yolcunun ekonomik gezegeni, genellikle daimi ikamet ettiği gezegen.\nCryoSleep Yolcunun duraklama süresinin sona erme hareketini almayı seçmeyi seçmediğini belirtir. Kriyo uykudaki yolcu kabinlerine kapatılır.\nKabin yolcusunun kabin numarası. Şeklindedirdeck/num/side, Liman veya Sancak için sideolabilir.PS Destinasyon-Yolcunun ineceği gezegen.\nYaş Yolcunun yaşı.\nVIP Yolcunun seyahati sırasında özel VIP hizmeti için ödemelerin yapılmadığı.\nRoomService , FoodCourt , Alışveriş Merkezi , Spa , VRDeck Uzay Gemisi Titanic'in birçok lüks konaklama için yolcunun ödediği tutar.\nİsim Yolcunun adı ve soyadı.\nTaşınan yolcunun başka bir boyuta taşınıp taşınmadığı. Bu hedefi tahmin etmeye çalışmak sütununda yer alır.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\ntrain <- read_csv(\"data/train.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 8693 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PassengerId, HomePlanet, Cabin, Destination, Name\ndbl (6): Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck\nlgl (3): CryoSleep, VIP, Transported\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ntest <- read_csv(\"data/test.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 4277 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PassengerId, HomePlanet, Cabin, Destination, Name\ndbl (6): Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck\nlgl (2): CryoSleep, VIP\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(explore)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(psych)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'psych'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:explore':\n\n    describe\n```\n\n\n:::\n\n```{.r .cell-code}\npsych::describe(train)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in FUN(newX[, i], ...): min için eksik olmayan argüman yok; Inf\ndöndürülüyor\nWarning in FUN(newX[, i], ...): min için eksik olmayan argüman yok; Inf\ndöndürülüyor\nWarning in FUN(newX[, i], ...): min için eksik olmayan argüman yok; Inf\ndöndürülüyor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in FUN(newX[, i], ...): max için eksik olmayan argüman yok; -Inf\ndöndürülüyor\nWarning in FUN(newX[, i], ...): max için eksik olmayan argüman yok; -Inf\ndöndürülüyor\nWarning in FUN(newX[, i], ...): max için eksik olmayan argüman yok; -Inf\ndöndürülüyor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             vars    n    mean      sd median trimmed     mad min   max range\nPassengerId*    1 8693 4347.00 2509.60 4347.0 4347.00 3221.69   1  8693  8692\nHomePlanet*     2 8492    1.67    0.80    1.0    1.58    0.00   1     3     2\nCryoSleep       3 8476     NaN      NA     NA     NaN      NA Inf  -Inf  -Inf\nCabin*          4 8494 3150.79 1975.53 3133.5 3128.98 2670.90   1  6560  6559\nDestination*    5 8511    2.48    0.82    3.0    2.60    0.00   1     3     2\nAge             6 8514   28.83   14.49   27.0   28.28   13.34   0    79    79\nVIP             7 8490     NaN      NA     NA     NaN      NA Inf  -Inf  -Inf\nRoomService     8 8512  224.69  666.72    0.0   64.97    0.00   0 14327 14327\nFoodCourt       9 8510  458.08 1611.49    0.0   88.31    0.00   0 29813 29813\nShoppingMall   10 8485  173.73  604.70    0.0   44.60    0.00   0 23492 23492\nSpa            11 8510  311.14 1136.71    0.0   64.59    0.00   0 22408 22408\nVRDeck         12 8505  304.85 1145.72    0.0   60.20    0.00   0 24133 24133\nName*          13 8493 4234.72 2446.08 4233.0 4234.28 3140.15   1  8473  8472\nTransported    14 8693     NaN      NA     NA     NaN      NA Inf  -Inf  -Inf\n              skew kurtosis    se\nPassengerId*  0.00    -1.20 26.92\nHomePlanet*   0.67    -1.11  0.01\nCryoSleep       NA       NA    NA\nCabin*        0.05    -1.29 21.44\nDestination* -1.10    -0.62  0.01\nAge           0.42     0.10  0.16\nVIP             NA       NA    NA\nRoomService   6.33    65.22  7.23\nFoodCourt     7.10    73.25 17.47\nShoppingMall 12.62   328.60  6.56\nSpa           7.63    81.13 12.32\nVRDeck        7.82    85.94 12.42\nName*         0.00    -1.20 26.54\nTransported     NA       NA    NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndescribe_all(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 8\n   variable     type     na na_pct unique   min   mean   max\n   <chr>        <chr> <int>  <dbl>  <int> <dbl>  <dbl> <dbl>\n 1 PassengerId  chr       0    0     4277    NA  NA       NA\n 2 HomePlanet   chr      87    2        4    NA  NA       NA\n 3 CryoSleep    lgl      93    2.2      3     0   0.37     1\n 4 Cabin        chr     100    2.3   3266    NA  NA       NA\n 5 Destination  chr      92    2.2      4    NA  NA       NA\n 6 Age          dbl      91    2.1     80     0  28.7     79\n 7 VIP          lgl      93    2.2      3     0   0.02     1\n 8 RoomService  dbl      82    1.9    843     0 219.   11567\n 9 FoodCourt    dbl     106    2.5    903     0 439.   25273\n10 ShoppingMall dbl      98    2.3    716     0 177.    8292\n11 Spa          dbl     101    2.4    834     0 303.   19844\n12 VRDeck       dbl      80    1.9    797     0 311.   22272\n13 Name         chr      94    2.2   4177    NA  NA       NA\n```\n\n\n:::\n:::\n\n\n\n\n# Veri Önizleme\n\nPESSENGER ID\nHer yolcu için benzersiz bir kimlik. Her kimlik, gggg_pp biçimini alır; burada gggg, yolcunun seyahat ettiği grubu belirtir ve pp, gruptaki numaradır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil.\n\nOnun yolcusu için benzersiz bir kimlik. Onun kimlik gggg_pp'sini alır; burada gggg, yolcunun birlikte seyahat ettiği grubu belirtir ve pp, grubun içindeki numaradır. Bir gruptaki insanların çoğu aile üyeleridir, ancak her zaman değil.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(train$PassengerId)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"0001_01\" \"0002_01\" \"0003_01\" \"0003_02\" \"0004_01\" \"0005_01\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain[c(\"ailenum\", \"ailesira\")] <- str_split_fixed(train$PassengerId, \"_\", 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest[c(\"ailenum\", \"ailesira\")] <- str_split_fixed(test$PassengerId, \"_\", 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(train[, c(\"PassengerId\",\"ailenum\", \"ailesira\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  PassengerId ailenum ailesira\n  <chr>       <chr>   <chr>   \n1 0001_01     0001    01      \n2 0002_01     0002    01      \n3 0003_01     0003    01      \n4 0003_02     0003    02      \n5 0004_01     0004    01      \n6 0005_01     0005    01      \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ tibble    3.2.1\n✔ ggplot2   3.5.1     ✔ tidyr     1.3.1\n✔ lubridate 1.9.3     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()   masks psych::%+%()\n✖ ggplot2::alpha() masks psych::alpha()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain <- train %>%\n  group_by(ailenum) %>%\n  mutate(tek_basina = ifelse(n() == 1, 1, 0)) %>%\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- test %>%\n  group_by(ailenum) %>%\n  mutate(tek_basina = ifelse(n() == 1, 1, 0)) %>%\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain <- train %>% select(-ailenum,-ailesira)\ntest <- test %>% select(-ailenum,-ailesira)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain$tek_basina <- as.factor(train$tek_basina)\ntest$tek_basina <- as.factor(test$tek_basina)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(train$tek_basina)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   0    1 \n3888 4805 \n```\n\n\n:::\n:::\n\n\n\n\n# CABİN\n\nYolcunun kaldığı kabin numarası. deck/num/side formunu alır, burada side, P (Sunboard) veya S (Pan) olabilir.\n\nYolcunun kaldığı kabin numarası. Güverte/numara/yan birleştirilir; burada taraf, İskele için P veya Sancak için S olabilir.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(train$Cabin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"B/0/P\" \"F/0/S\" \"A/0/S\" \"A/0/S\" \"F/1/S\" \"F/0/P\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain[c('deck', 'num', 'side')] <- str_split_fixed(train$Cabin, '/', 3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest[c('deck', 'num', 'side')] <- str_split_fixed(test$Cabin, '/', 3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(train[, c(\"Cabin\",\"deck\", \"num\", \"side\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Cabin deck  num   side \n  <chr> <chr> <chr> <chr>\n1 B/0/P B     0     P    \n2 F/0/S F     0     S    \n3 A/0/S A     0     S    \n4 A/0/S A     0     S    \n5 F/1/S F     1     S    \n6 F/0/P F     0     P    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain[train == \"\"] <- NA\ntest[test == \"\"] <- NA\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain <- train %>% select(-Cabin)\ntest <- test %>% select(-Cabin)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(as.factor(train$deck))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   A    B    C    D    E    F    G    T NA's \n 256  779  747  478  876 2794 2559    5  199 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain$deck[train$deck %in% c(\"T\", \"NA\")] <- \"Other\"\ntest$deck[test$deck %in% c(\"T\", \"NA\")] <- \"Other\"\ntrain$deck[is.na(train$deck)] <- \"Other\"\ntest$deck[is.na(test$deck)] <- \"Other\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(as.factor(train$deck))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A     B     C     D     E     F     G Other \n  256   779   747   478   876  2794  2559   204 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndescribe_all(train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 × 8\n   variable     type     na na_pct unique   min   mean   max\n   <chr>        <chr> <int>  <dbl>  <int> <dbl>  <dbl> <dbl>\n 1 PassengerId  chr       0    0     8693    NA  NA       NA\n 2 HomePlanet   chr     201    2.3      4    NA  NA       NA\n 3 CryoSleep    lgl     217    2.5      3     0   0.36     1\n 4 Destination  chr     182    2.1      4    NA  NA       NA\n 5 Age          dbl     179    2.1     81     0  28.8     79\n 6 VIP          lgl     203    2.3      3     0   0.02     1\n 7 RoomService  dbl     181    2.1   1274     0 225.   14327\n 8 FoodCourt    dbl     183    2.1   1508     0 458.   29813\n 9 ShoppingMall dbl     208    2.4   1116     0 174.   23492\n10 Spa          dbl     183    2.1   1328     0 311.   22408\n11 VRDeck       dbl     188    2.2   1307     0 305.   24133\n12 Name         chr     200    2.3   8474    NA  NA       NA\n13 Transported  lgl       0    0        2     0   0.5      1\n14 tek_basina   fct       0    0        2    NA  NA       NA\n15 deck         chr       0    0        8    NA  NA       NA\n16 num          chr     199    2.3   1818    NA  NA       NA\n17 side         chr     199    2.3      3    NA  NA       NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain <- train %>% select(-Name, -num)\ntest <- test %>% select(-Name, -num)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain <- train %>%\n  mutate_if(is.logical, as.factor) %>%   # Convert logical columns to factors\n  mutate(across(where(is.character) & !all_of(\"PassengerId\"), as.factor))      # Convert character columns to factors\n\ntest <- test %>%\n  mutate_if(is.logical, as.factor) %>%   # Convert logical columns to factors\n  mutate(across(where(is.character) & !all_of(\"PassengerId\"), as.factor))      # Convert character columns to factors\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n PassengerId         HomePlanet   CryoSleep           Destination  \n Length:8693        Earth :4602   FALSE:5439   55 Cancri e  :1800  \n Class :character   Europa:2131   TRUE :3037   PSO J318.5-22: 796  \n Mode  :character   Mars  :1759   NA's : 217   TRAPPIST-1e  :5915  \n                    NA's  : 201                NA's         : 182  \n                                                                   \n                                                                   \n                                                                   \n      Age           VIP        RoomService        FoodCourt      \n Min.   : 0.00   FALSE:8291   Min.   :    0.0   Min.   :    0.0  \n 1st Qu.:19.00   TRUE : 199   1st Qu.:    0.0   1st Qu.:    0.0  \n Median :27.00   NA's : 203   Median :    0.0   Median :    0.0  \n Mean   :28.83                Mean   :  224.7   Mean   :  458.1  \n 3rd Qu.:38.00                3rd Qu.:   47.0   3rd Qu.:   76.0  \n Max.   :79.00                Max.   :14327.0   Max.   :29813.0  \n NA's   :179                  NA's   :181       NA's   :183      \n  ShoppingMall          Spa              VRDeck        Transported  tek_basina\n Min.   :    0.0   Min.   :    0.0   Min.   :    0.0   FALSE:4315   0:3888    \n 1st Qu.:    0.0   1st Qu.:    0.0   1st Qu.:    0.0   TRUE :4378   1:4805    \n Median :    0.0   Median :    0.0   Median :    0.0                          \n Mean   :  173.7   Mean   :  311.1   Mean   :  304.9                          \n 3rd Qu.:   27.0   3rd Qu.:   59.0   3rd Qu.:   46.0                          \n Max.   :23492.0   Max.   :22408.0   Max.   :24133.0                          \n NA's   :208       NA's   :183       NA's   :188                              \n      deck        side     \n F      :2794   P   :4206  \n G      :2559   S   :4288  \n E      : 876   NA's: 199  \n B      : 779              \n C      : 747              \n D      : 478              \n (Other): 460              \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n PassengerId         HomePlanet   CryoSleep           Destination  \n Length:4277        Earth :2263   FALSE:2640   55 Cancri e  : 841  \n Class :character   Europa:1002   TRUE :1544   PSO J318.5-22: 388  \n Mode  :character   Mars  : 925   NA's :  93   TRAPPIST-1e  :2956  \n                    NA's  :  87                NA's         :  92  \n                                                                   \n                                                                   \n                                                                   \n      Age           VIP        RoomService        FoodCourt      \n Min.   : 0.00   FALSE:4110   Min.   :    0.0   Min.   :    0.0  \n 1st Qu.:19.00   TRUE :  74   1st Qu.:    0.0   1st Qu.:    0.0  \n Median :26.00   NA's :  93   Median :    0.0   Median :    0.0  \n Mean   :28.66                Mean   :  219.3   Mean   :  439.5  \n 3rd Qu.:37.00                3rd Qu.:   53.0   3rd Qu.:   78.0  \n Max.   :79.00                Max.   :11567.0   Max.   :25273.0  \n NA's   :91                   NA's   :82        NA's   :106      \n  ShoppingMall         Spa              VRDeck        tek_basina      deck     \n Min.   :   0.0   Min.   :    0.0   Min.   :    0.0   0:1937     F      :1445  \n 1st Qu.:   0.0   1st Qu.:    0.0   1st Qu.:    0.0   1:2340     G      :1222  \n Median :   0.0   Median :    0.0   Median :    0.0              E      : 447  \n Mean   : 177.3   Mean   :  303.1   Mean   :  310.7              B      : 362  \n 3rd Qu.:  33.0   3rd Qu.:   50.0   3rd Qu.:   36.0              C      : 355  \n Max.   :8292.0   Max.   :19844.0   Max.   :22272.0              D      : 242  \n NA's   :98       NA's   :101       NA's   :80                   (Other): 204  \n   side     \n P   :2084  \n S   :2093  \n NA's: 100  \n            \n            \n            \n            \n```\n\n\n:::\n:::\n\n\n\n\n# AGE\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a ggplot object for train dataset\np_train <- ggplot(train, aes(x = Age)) +\n  geom_histogram(fill = \"blue\", alpha = 0.5, bins = 20) +\n  labs(title = \"Train Dataset\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n\n# Create a ggplot object for test dataset\np_test <- ggplot(test, aes(x = Age)) +\n  geom_histogram(fill = \"red\", alpha = 0.5, bins = 20) +\n  labs(title = \"Test Dataset\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'gridExtra'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(p_train, p_test, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 179 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 91 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](odev1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the histogram for both datasets in one plot without combining\nggplot() +\n  geom_histogram(data = train, aes(x = Age, fill = \"Train\"), \n                 position = \"identity\", alpha = 0.5, bins = 20) +\n  geom_histogram(data = test, aes(x = Age, fill = \"Test\"), \n                 position = \"identity\", alpha = 0.5, bins = 20) +\n  labs(title = \"Histogram of Age Variable\",\n       x = \"Age\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(name = \"Dataset\", values = c(\"Train\" = \"blue\", \"Test\" = \"red\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 179 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 91 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](odev1_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n# Home Planet\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(train$HomePlanet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Earth Europa   Mars   NA's \n  4602   2131   1759    201 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(test$HomePlanet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Earth Europa   Mars   NA's \n  2263   1002    925     87 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a ggplot object for train dataset\np_hptrain <- ggplot(train, aes(x = HomePlanet)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Train Dataset\", x = \"Home Planet\", y = \"Count\") +\n  theme_minimal()\n\n# Create a ggplot object for test dataset\np_hptest <- ggplot(test, aes(x = HomePlanet)) +\n  geom_bar(fill = \"red\", alpha = 0.5) +\n  labs(title = \"Test Dataset\", x = \"Home Planet\", y = \"Count\") +\n  theme_minimal()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(p_hptrain, p_hptest, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](odev1_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the histogram for both datasets in one plot without combining\nggplot() +\n  geom_bar(data = train, aes(x = HomePlanet, fill = \"Train\"), \n                 position = \"identity\", alpha = 0.5) +\n  geom_bar(data = test, aes(x = HomePlanet, fill = \"Test\"), \n                 position = \"identity\", alpha = 0.5) +\n  labs(title = \"Histogram of Age Variable\",\n       x = \"Home Planet\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(name = \"Dataset\", values = c(\"Train\" = \"blue\", \"Test\" = \"red\"))\n```\n\n::: {.cell-output-display}\n![](odev1_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n# TRANSPORTED\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(train, aes(x = Transported)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Train Dataset\", x = \"Transported\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](odev1_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ ggplot2::%+%()       masks psych::%+%()\n✖ scales::alpha()      masks ggplot2::alpha(), psych::alpha()\n✖ gridExtra::combine() masks dplyr::combine()\n✖ scales::discard()    masks purrr::discard()\n✖ dplyr::filter()      masks stats::filter()\n✖ recipes::fixed()     masks stringr::fixed()\n✖ dplyr::lag()         masks stats::lag()\n✖ yardstick::spec()    masks readr::spec()\n✖ recipes::step()      masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_recipe <- recipe(Transported ~ ., data = train) %>% \n  update_role(PassengerId, new_role = \"ID\") %>%\n  step_impute_knn(all_predictors()) %>%\n  step_normalize(all_numeric_predictors()) %>% \n  step_dummy(all_nominal_predictors(), one_hot = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the logistic regression model\nlogistic_model <- logistic_reg() %>%\n  set_engine(\"glm\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(logistic_model)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission <- as.data.frame(submission)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(submission, \"submission_logistic.csv\", row.names = FALSE, quote = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_model <- rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% \n  set_engine(\"ranger\") %>% \n  set_mode(\"classification\")\n\nset.seed(123)\nrf_wf <-\n  workflow() %>%\n  add_model(rf_model) %>% \n  add_recipe(st_recipe)\nrf_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_impute_knn()\n• step_normalize()\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  mtry = tune()\n  trees = 1000\n  min_n = tune()\n\nComputational engine: ranger \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nspaceship_val <- validation_split(train, \n                               strata = Transported, \n                               prop = 0.80)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `validation_split()` was deprecated in rsample 1.2.0.\nℹ Please use `initial_validation_split()` instead.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_results <-\n  rf_wf %>% \n  tune_grid(resamples = spaceship_val,\n            grid = 25,\n            control = control_grid(save_pred = TRUE),\n            metrics = metric_set(accuracy)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ni Creating pre-processing data to finalize unknown parameter: mtry\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_results %>% \n  collect_predictions()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 43,475 × 7\n   .pred_class id          .row  mtry min_n Transported .config              \n   <fct>       <chr>      <int> <int> <int> <fct>       <chr>                \n 1 FALSE       validation    17    27    12 FALSE       Preprocessor1_Model01\n 2 TRUE        validation    19    27    12 TRUE        Preprocessor1_Model01\n 3 FALSE       validation    28    27    12 FALSE       Preprocessor1_Model01\n 4 FALSE       validation    41    27    12 FALSE       Preprocessor1_Model01\n 5 FALSE       validation    43    27    12 FALSE       Preprocessor1_Model01\n 6 TRUE        validation    52    27    12 TRUE        Preprocessor1_Model01\n 7 TRUE        validation    56    27    12 FALSE       Preprocessor1_Model01\n 8 FALSE       validation    60    27    12 TRUE        Preprocessor1_Model01\n 9 TRUE        validation    71    27    12 TRUE        Preprocessor1_Model01\n10 TRUE        validation    78    27    12 TRUE        Preprocessor1_Model01\n# ℹ 43,465 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_results %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 25 × 8\n    mtry min_n .metric  .estimator  mean     n std_err .config              \n   <int> <int> <chr>    <chr>      <dbl> <int>   <dbl> <chr>                \n 1    27    12 accuracy binary     0.788     1      NA Preprocessor1_Model01\n 2    25    16 accuracy binary     0.792     1      NA Preprocessor1_Model02\n 3    25    36 accuracy binary     0.794     1      NA Preprocessor1_Model03\n 4     7    31 accuracy binary     0.804     1      NA Preprocessor1_Model04\n 5    11     4 accuracy binary     0.795     1      NA Preprocessor1_Model05\n 6     3    13 accuracy binary     0.796     1      NA Preprocessor1_Model06\n 7    19    30 accuracy binary     0.791     1      NA Preprocessor1_Model07\n 8    21     8 accuracy binary     0.789     1      NA Preprocessor1_Model08\n 9     9    34 accuracy binary     0.800     1      NA Preprocessor1_Model09\n10    12    22 accuracy binary     0.798     1      NA Preprocessor1_Model10\n# ℹ 15 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparam_final <- rf_results %>%\n  select_best(metric = \"accuracy\")\nparam_final\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n   mtry min_n .config              \n  <int> <int> <chr>                \n1     6     6 Preprocessor1_Model14\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_rf_model <- rand_forest(mtry = param_final$mtry, min_n = param_final$min_n, trees = 1000) %>% \n  set_engine(\"ranger\") %>% \n  set_mode(\"classification\")\n\nlast_rf_wf <- rf_wf %>%\n  update_model(last_rf_model)\n\nlast_rf_fit <- \n  last_rf_wf %>% \n  fit(train)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- predict(last_rf_fit, test)\n\noptions(warn = getOption(\"warn\"))\ntest_pred_new <- test_pred %>% \n  mutate(.pred_class = str_to_title(.pred_class))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission$Transported <- test_pred_new$.pred_class\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(submission, \"submissionrf.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbt_cls_spec <- \n    boost_tree(trees = 15) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"xgboost\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbt_cls_spec <- \n    boost_tree(trees = 15) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"xgboost\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(bt_cls_spec)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission <- as.data.frame(submission)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(submission, \"submission_xg.csv\", row.names = FALSE, quote = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_cls_spec <- \n    svm_poly(cost = 1) %>% \n    # This model can be used for classification or regression, so set mode\n    set_mode(\"classification\") %>% \n    set_engine(\"kernlab\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(svm_cls_spec)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Setting default kernel parameters  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission <- as.data.frame(submission)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(submission, \"submission_polysvm.csv\", row.names = FALSE, quote = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_cls_spec <- \n  svm_rbf(cost = 1) %>% \n  # This model can be used for classification or regression, so set mode\n  set_mode(\"classification\") %>% \n  set_engine(\"kernlab\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a workflow\nst_workflow <- workflow() %>%\n  add_recipe(st_recipe) %>%\n  add_model(svm_cls_spec)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the model directly with the workflow\ntrained_model <- st_workflow %>%\n  fit(data = train)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the test data and make predictions in one step\npredictions <- trained_model %>%\n  predict(new_data = test) %>%     # Directly pass the test data\n  bind_cols(test)                   # Bind the original test data for reference\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 3: Extract the id from the test data and the predicted prices\nsubmission <- predictions %>% \n  select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently\n  rename(Transported = .pred_class)                # Rename predicted column if needed\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission <- as.data.frame(submission)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmission$Transported <- str_to_title(submission$Transported)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(submission, \"submission_rbfsvm.csv\", row.names = FALSE, quote = FALSE)\n```\n:::\n",
    "supporting": [
      "odev1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}